// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  password      String   // Hashed password for manual sign up
  emailVerified DateTime?
  image         String?
  arguments     Argument[]
  votes         Vote[]
  debates       Debate[] @relation("DebateCreator")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Debate {
  id          String     @id @default(cuid())
  title       String
  description String
  tags        String[]
  category    String
  image       String?
  duration    Int        // Duration in minutes
  status      String     // e.g., "open", "closed"
  creator     User       @relation("DebateCreator", fields: [creatorId], references: [id])
  creatorId   String
  arguments   Argument[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  endsAt      DateTime
}

model Argument {
  id         String   @id @default(cuid())
  content    String
  side       String   // "support" or "oppose"
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  debate     Debate   @relation(fields: [debateId], references: [id])
  debateId   String
  votes      Vote[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  edited     Boolean  @default(false)
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  argument   Argument @relation(fields: [argumentId], references: [id])
  argumentId String
  value      Int      // 1 for upvote, -1 for downvote (or just 1 for single vote)
  createdAt  DateTime @default(now())
  @@unique([userId, argumentId])
}
